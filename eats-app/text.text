     <NavLink to="/" >Home</NavLink>
      <NavLink to="/menu" >Menu</NavLink>
      <NavLink to="/basket" >Basket</NavLink>
      <NavLink to="/contact" >Contact</NavLink>
   



   import { useState } from 'react'
import '../styleComp/cardMenu.css'
import CartMenu from '../components/CardMenu'
import CartBasket from '../components/CartBasket'
import basket from '../images/basket.png'
import back from '../images/back.png'
function Menu() {
  // тут забераем карть на которий нажали
  const [cart, setCart] = useState([])

  // перекулчения с карта на продукта 
  const [page, setPage] = useState(true)


 // фн для збор карт нужна продукт указать как обект а не как масив
 const addToCart = (product)=>{
    setCart([...cart, {...product}])
    //console.log(product)
  }

// фн удаления с карта 
const removeFromCart = (productToRemove)=>{
setCart(cart.filter(product => product !== productToRemove ))
}

return(
  <div className="cont">
  <header className="header">
     <img src={back} alt="icon"  onClick={()=>{setPage(true)} } /> 
<h1 >{ page ? cart.length : '' }</h1>
    <img src={basket} alt="icon"  onClick={()=>{setPage(false)} } />
  </header>
  {page ? <CartMenu addToCart={addToCart} />: <CartBasket removeFromCart={removeFromCart} cart={cart}/>}
</div>
)
 
}

export default Menu




<h3 >{product.name}</h3>
    <h4  >{product.cost}</h4>
    <img  src={product.image }  alt={product.name} className="imgProduct" />
     <img  src={remove} alt="icon"  onClick={()=>removeFromCart(product)} className="iconRemove" />
     <h3  >{product.name}</h3>
<h4 >{product.cost}</h4>
<img  src={product.image }  alt={product.name} className="imgProduct" />
<img src={add} alt="icon"  onClick={()=> addToCart(product)} className="iconRemove"   />






<h4>{product.cost}</h4>
<img src={product.image }  alt={product.name} className="imgProduct" />
<img src={add} alt="icon"  onClick={()=> addToCart(product)} className="iconRemove"   />



<h4>{product.cost}</h4>
    <img src={product.image }  alt={product.name} className="imgProduct" />
     <img src={remove} alt="icon"  onClick={()=>removeFromCart(product)} className="iconRemove" />
 flex-direction: column;
    flex-wrap: nowrap;
   justify-content: space-around;
   align-items: center;


.flex-container {
    display: -ms-flexbox;
    display: -webkit-flex;
    display: flex;
    -webkit-flex-direction: row;
    -ms-flex-direction: row;
    flex-direction: row;
    -webkit-flex-wrap: wrap;
    -ms-flex-wrap: wrap;
    flex-wrap: wrap;
    -webkit-justify-content: space-between;
    -ms-flex-pack: justify;
    justify-content: space-between;
    -webkit-align-content: stretch;
    -ms-flex-line-pack: stretch;
    align-content: stretch;
    -webkit-align-items: flex-start;
    -ms-flex-align: start;
    align-items: flex-start;
    }

.flex-item:nth-child(1) {
    -webkit-order: 0;
    -ms-flex-order: 0;
    order: 0;
    -webkit-flex: 0 1 auto;
    -ms-flex: 0 1 auto;
    flex: 0 1 auto;
    -webkit-align-self: auto;
    -ms-flex-item-align: auto;
    align-self: auto;
    }

.flex-item:nth-child(2) {
    -webkit-order: 0;
    -ms-flex-order: 0;
    order: 0;
    -webkit-flex: 0 1 auto;
    -ms-flex: 0 1 auto;
    flex: 0 1 auto;
    -webkit-align-self: auto;
    -ms-flex-item-align: auto;
    align-self: auto;
    }

.flex-item:nth-child(3) {
    -webkit-order: 0;
    -ms-flex-order: 0;
    order: 0;
    -webkit-flex: 0 1 auto;
    -ms-flex: 0 1 auto;
    flex: 0 1 auto;
    -webkit-align-self: auto;
    -ms-flex-item-align: auto;
    align-self: auto;
    }



    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
    justify-content: space-between;
    align-content: stretch;
    align-items: flex-start;



   
    order: 0;
    flex: 0 1 auto;
    align-self: flex-end;




    display: flex;
    flex-direction: column;
    flex-wrap: wrap;
    justify-content: flex-start;
    align-content: stretch;
    align-items: center;



<textarea  rows="4" cols="50">
</textarea>


const fileChange = (e)=> {
  const files = e.target.files
  var formData = new FormData()
  formData.append('image', files[0])
setFile(formData)
console.log(formData)
}


'Content-Type': 'application/x-www-form-urlencoded'
 if(body.file){
        headers['Content-Type'] = 'application/x-www-form-urlencoded'
      }



const sendFile = async e =>{
  try {

    const data = await requestFile('/api/order','POST',{ ...form, file},
    { 
       Authorization: auth.token,
       'Content-Type': 'application/x-www-form-urlencoded'
      
      }
    )

   console.log(data)
  
    } catch (e) {console.log(e)}

}


const result = fetch("api/order",{
  method: 'POST',
  headers: {
  'Content-Type':  'multipart/form-data'
 
},
  body: data,
})
console.log(result)


const data = new FormData()
data.append("username", "file")
data.append("file", file)
//Axios.post("/", data)
//.then(res=>{console.log(res)})
//.catch(err=>{console.log(err)})


 .then(response => response.text())
  .then(result => console.log(result))
  .catch(error => console.log('error', error));



  // отправка файл текст в сервер
  const sendFile = async () => {
    const formdata = new FormData();
    formdata.append("name", form.name);
    formdata.append("cost", form.cost);
    formdata.append("p", form.p);
    formdata.append("file", file);
    const requestOptions = {
      method: 'POST',
      headers: {
        "Authorization": auth.token
      },
      body: formdata,
      redirect: 'follow'

    };

    await fetch("/api/order", requestOptions)
      .then(response => response.json())
      .then(result => console.log(result))
      .catch(error => console.log('error', error))
  }



   const orderHandler = async ()=>{
      const formdata = new FormData();
      formdata.append("name", form.name);
      formdata.append("cost", form.cost);
      formdata.append("p", form.p);
      formdata.append("file", file);
    try {
    const data = await  request('/api/order','POST',{formdata},{
  "Authorization": auth.token
    })
    message(data.message)
    
    
    } catch (e) {}
  }



    const [products] = useState([
    {
      p: 'Stosowanie paragrafów i artykułów jest czasami wykorzystywane ',
  name: 'AA Battery',
  cost: '$2.99',
  imageSrc: kebab
  },{
    p: 'Stosowanie paragrafów i artykułów jest czasami wykorzystywane ',
      name: 'Blanket',
      cost: '$19.99',
      imageSrc: kebab
    },  {
      p: 'Stosowanie paragrafów i artykułów jest czasami wykorzystywane ',
      name: 'AA Battery',
      cost: '$2.99',
      imageSrc: kebab
        }
  ])



  4

Вы можете передать «true» или «» проверенному свойству флажка ввода. Пустые кавычки ("") будут восприниматься как ложные, и элемент не будет отмечен.

let checked = variable === value ? "true" : "";
<input
     className="form-check-input"
    type="checkbox"
    value={variable}
    id={variable}
    name={variable}
    checked={checked}
/>
<label className="form-check-label">{variable}</label>





function Checkbox() {
  const [checked, setChecked] = React.useState(true);

  return (
    <label>
      <input type="checkbox"
        checked={checked}
        onChange={() => setChecked(!checked)}
      />
      Check Me!
    </label>
  );
}

ReactDOM.render(
  <Checkbox />,
  document.getElementById('checkbox'),
);
 
const contactsHandler = useCallback( async()=>{
  const requestOptions = {
  method: 'GET',
  headers: {
  "Authorization": auth.token
  },
  redirect: 'follow'
  }
  try{
  const res = await fetch('/api/auth/mycontacts',requestOptions )
  const date = await res.json()
  setContacts(date)
  }catch(e){}
  },[auth.token])
  
  useEffect(()=>{
  contactsHandler()
  },[contactsHandler])
  var myHeaders = new Headers();
  myHeaders.append("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI1ZmQzM2NmNTA3MmNmMDE1Yjg2MjRjN2QiLCJpYXQiOjE2MDg3NzYwMTR9.dYQBdBfq_8EaWs17PyOgPkAIQ_1FzKfPjy87vpr8udU");
  
  var requestOptions = {
    method: 'DELETE',
    headers: myHeaders,
    redirect: 'follow'
  };
  
  fetch("http://localhost:5000/api/auth/contact/5fe3da2b83533403cc3de892", requestOptions)
    .then(response => response.text())
    .then(result => console.log(result))
    .catch(error => console.log('error', error));

    try {
      const create = new Create({
      name: req.body.name,
      cost: req.body.cost,
      p: req.body.p,
      user: req.user.id,
      //провераем если есть файл иначе добавлаем пустой строка
      imageSrc: req.file ? req.file.path : ''
      })
      await create.save()
      res.status(201).json({message: 'Спасибо вы создали Меню'})
  } catch (e) {
  errorHandlier(res, e)
  }

  <header className="header">
  <h3>{cart.length}</h3> 
 <img className={page?  'basket':''} src={basket} alt={basket.name}  onClick={()=>{setPage(!page)} } />
  <img  className={page? 'back':''} src={back} alt={back.name}  onClick={()=>{setPage(!page)} } />
 </header>

 {page ?
  <CartMenu addToCart={addToCart} />:
  <CartBasket removeFromCart={removeFromCart} cart={cart} />}